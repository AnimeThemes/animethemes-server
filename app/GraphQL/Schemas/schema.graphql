"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Indicates what fields are available at the top level of a query operation."
type Query {
    "List multiple users."
    users(
      "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
      name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10, model: "App\\Models\\Auth\\User")

    animes(
      search: String @search
      name: String @where(operator: "like")
      season: AnimeSeason @eq
      where: _ @whereConditions(columns: ["*"])
      whereHas: [WhereHasConditions!] @whereHasConditions(columns: ["*"])
    ): [Anime!]!
    @canModel(ability: "viewAny", injectArgs: true)
    @softDeletes
    @paginate(defaultCount: 10)

    animeyear(year: Int!): AnimeYear
    @canModel(ability: "viewAny", model: "App\\Models\\Wiki\\Anime", injectArgs: true)

    animeyears: [Int!]!
    @canModel(ability: "viewAny", model: "App\\Models\\Wiki\\Anime", injectArgs: true)

    artists(
      name: String @eq
    ): [Artist!]!
    @canModel(ability: "viewAny", injectArgs: true)
    @paginate(defaultCount: 10)

    currentfeaturedtheme: FeaturedTheme @find
    @canModel(ability: "viewAny", injectArgs: true)
    @builder(method: "App\\GraphQL\\Builders\\Admin\\FeaturedThemeBuilder@current")

    externalresources(
      site: ResourceSite @eq
      link: String @eq
    ): [ExternalResource!]!
    @canModel(ability: "viewAny", injectArgs: true)
    @paginate(defaultCount: 10)

    images(
      path: String @where(operator: "like")
    ): [Image!]!
    @canModel(ability: "viewAny", injectArgs: true)
    @paginate(defaultCount: 10)

    me: Me @auth

    playlists(
      name: String @eq
    ): [Playlist!]!
    @canModel(ability: "viewAny", injectArgs: true)
    @builder(method: "App\\GraphQL\\Builders\\List\\PlaylistBuilder@index")
    @paginate(defaultCount: 10)

    search(search: String @search, perPage: Int, page: Int): Search!
}

type Search {
    anime: [Anime!]!
    artists: [Artist!]!
    animethemes: [AnimeTheme!]!
    playlists: [Playlist!]!
    series: [Series!]!
    songs: [Song!]!
    studios: [Studio!]!
    videos: [Video!]!
}

type MessageResponse {
    message: String
}

input WhereHasConditions {
  relation: String!
  where: [WhereConditions!]
  AND: [WhereHasConditions!]
  OR: [WhereHasConditions!]
}

#import Admin/*.graphql
#import Auth/*.graphql
#import Document/*.graphql
#import List/*.graphql
#import List/Playlist/*.graphql
#import Wiki/*.graphql
#import Wiki/Anime/*.graphql
#import Wiki/Anime/AnimeTheme/*.graphql
#import Wiki/Song/*.graphql
#import Wiki/Video/*.graphql
