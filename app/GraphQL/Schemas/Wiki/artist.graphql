"Default edge to use in simple belongs to many relationships"
type ArtistEdge {
    node: Artist!
    "The date that the resource was last modified"
    createdAt: DateTimeTz @field(resolver: "App\\GraphQL\\Resolvers\\PivotResolver@resolve")
    "The date that the resource was deleted"
    updatedAt: DateTimeTz @field(resolver: "App\\GraphQL\\Resolvers\\PivotResolver@resolve")
}

"Artist Member has extra pivots"
type ArtistMemberEdge {
    node: Artist!
    "Used to distinguish member by alias"
    alias: String @field(resolver: "App\\GraphQL\\Resolvers\\PivotResolver@resolve")
    "Used to distinguish member by character"
    as: String @field(resolver: "App\\GraphQL\\Resolvers\\PivotResolver@resolve")
    "Used to extra annotation, like member role"
    notes: String @field(resolver: "App\\GraphQL\\Resolvers\\PivotResolver@resolve")
}

"Artist Image has an extra pivot that others image relationships don't"
type ArtistImageEdge {
    node: Image!
    "Used to sort the artist images"
    depth: Int @field(resolver: "App\\GraphQL\\Resolvers\\PivotResolver@resolve")
    "The date that the resource was last modified"
    createdAt: DateTimeTz @field(resolver: "App\\GraphQL\\Resolvers\\PivotResolver@resolve")
    "The date that the resource was deleted"
    updatedAt: DateTimeTz @field(resolver: "App\\GraphQL\\Resolvers\\PivotResolver@resolve")
}

enum ArtistColumnsOrderable {
    ID @enum(value: "artist_id")
    NAME
    SLUG
    CREATED_AT
    UPDATED_AT
    DELETED_AT
}

extend type Query {
    "Returns a listing of artist resources given fields."
    artists(
        createdAt_lesser: DateTimeTz @where(key: "created_at", operator: "<")
        createdAt_greater: DateTimeTz @where(key: "created_at", operator: ">")
        updatedAt_lesser: DateTimeTz @where(key: "updated_at", operator: "<")
        updatedAt_greater: DateTimeTz @where(key: "updated_at", operator: ">")
        deletedAt_lesser: DateTimeTz @where(key: "deleted_at", operator: "<")
        deletedAt_greater: DateTimeTz @where(key: "deleted_at", operator: ">")
        orderBy: _ @orderBy(columnsEnum: "ArtistColumnsOrderable")
    ): [Artist!]!
    @canModel(ability: "viewAny", injectArgs: true)
    @softDeletes
    @paginate
}