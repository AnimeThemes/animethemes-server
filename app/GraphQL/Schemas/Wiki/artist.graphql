type Artist {
    id: Int! @rename(attribute: "artist_id")
    name: String!
    slug: String!
    information: String
    created_at: DateTimeTz
    updated_at: DateTimeTz
    deleted_at: DateTimeTz
    groups: [Artist] @belongsToMany(type: CONNECTION, edgeType: ArtistMemberEdge)
    images: [Image] @belongsToMany(type: CONNECTION, edgeType: ArtistImageEdge)
    members: [Artist] @belongsToMany(type: CONNECTION, edgeType: ArtistMemberEdge)
    memberships: [Membership] @hasMany
    performances: [Performance] @morphMany
    resources: [ExternalResource]! @belongsToMany(type: CONNECTION)
}

"Default edge to use in simple belongs to many relationships"
type ArtistEdge {
    node: Artist!
    created_at: DateTimeTz @field(resolver: "App\\GraphQL\\Resolvers\\PivotResolver@resolve")
    updated_at: DateTimeTz @field(resolver: "App\\GraphQL\\Resolvers\\PivotResolver@resolve")
}

"Artist Member has extra pivots"
type ArtistMemberEdge {
    node: Artist!
    alias: String @field(resolver: "App\\GraphQL\\Resolvers\\PivotResolver@resolve")
    as: String @field(resolver: "App\\GraphQL\\Resolvers\\PivotResolver@resolve")
    notes: String @field(resolver: "App\\GraphQL\\Resolvers\\PivotResolver@resolve")
}

"Artist Image has an extra pivot that others image relationships don't"
type ArtistImageEdge {
    node: Image!
    depth: Int @field(resolver: "App\\GraphQL\\Resolvers\\PivotResolver@resolve")
    created_at: DateTimeTz @field(resolver: "App\\GraphQL\\Resolvers\\PivotResolver@resolve")
    updated_at: DateTimeTz @field(resolver: "App\\GraphQL\\Resolvers\\PivotResolver@resolve")
}