"Default edge to use in simple belongs to many relationships"
type AnimeEdge {
    node: Anime!
    "The date that the resource was last modified"
    createdAt: DateTimeTz @field(resolver: "App\\GraphQL\\Resolvers\\PivotResolver@resolve")
    "The date that the resource was deleted"
    updatedAt: DateTimeTz @field(resolver: "App\\GraphQL\\Resolvers\\PivotResolver@resolve")
}

type AnimeYear {
    winter: [Anime]
    spring: [Anime]
    summer: [Anime]
    fall: [Anime]
}

enum AnimeColumnsOrderable {
    ID @enum(value: "anime_id")
    NAME
    MEDIA_FORMAT
    SEASON
    SLUG
    YEAR
    CREATED_AT
    UPDATED_AT
    DELETED_AT
}

enum HasResources {
    SITE
    EXTERNAL_ID
}

extend type Query {
    "Returns a listing of anime resources given fields."
    animes(
        search: String @search
        name: String @where(operator: "like")
        mediaFormat: [AnimeMediaFormat] @in(key: "media_format")
        season: [AnimeSeason] @in
        slug: String @eq
        year_in: [Int] @in(key: "year")
        year_notin: [Int] @notIn(key: "year")
        year_lesser: Int @where(key: "year", operator: "<")
        year_greater: Int @where(key: "year", operator: ">")
        where: _ @whereConditions(columns: ["name"])
        whereHas: [WhereHasConditions!] @whereHasConditions(columns: ["*"])
        hasResources: [WhereHasConditions!] @whereHasConditions(columnsEnum: "HasResources")
        createdAt_lesser: DateTimeTz @where(key: "created_at", operator: "<")
        createdAt_greater: DateTimeTz @where(key: "created_at", operator: ">")
        updatedAt_lesser: DateTimeTz @where(key: "updated_at", operator: "<")
        updatedAt_greater: DateTimeTz @where(key: "updated_at", operator: ">")
        deletedAt_lesser: DateTimeTz @where(key: "deleted_at", operator: "<")
        deletedAt_greater: DateTimeTz @where(key: "deleted_at", operator: ">")
        orderBy: _ @orderBy(columnsEnum: "AnimeColumnsOrderable")
    ): [Anime!]!
    @canModel(ability: "viewAny", injectArgs: true)
    @softDeletes
    @paginate

    "Returns a listing of anime resources for a given year grouped by season and ordered by name."
    animeyear(year: Int!): AnimeYear
    @canModel(ability: "viewAny", model: "App\\Models\\Wiki\\Anime", injectArgs: true)
    @field(resolver: "App\\GraphQL\\Queries\\AnimeYear@year")

    "Returns a list of unique years from all anime resources."
    animeyears: [Int!]!
    @canModel(ability: "viewAny", model: "App\\Models\\Wiki\\Anime", injectArgs: true)
    @field(resolver: "App\\GraphQL\\Queries\\AnimeYear@years")
}