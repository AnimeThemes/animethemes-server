type Playlist {
    id: String! @rename(attribute: "hashid")
    name: String!
    description: String
    visibility: PlaylistVisibility! @localizedEnum
    created_at: DateTimeTz
    updated_at: DateTimeTz
    deleted_at: DateTimeTz
    first: PlaylistTrack @belongsTo
    images: [Image] @belongsToMany(type: CONNECTION, edgeType: PlaylistImageEdge)
    last: PlaylistTrack @belongsTo
    tracks: [PlaylistTrack] @hasMany
    user: User @belongsTo
}

type PlaylistImageEdge {
    node: Image!
    created_at: DateTimeTz @field(resolver: "App\\GraphQL\\Resolvers\\PivotResolver@resolve")
    updated_at: DateTimeTz @field(resolver: "App\\GraphQL\\Resolvers\\PivotResolver@resolve")
}

extend type Mutation @guard {
    createPlaylist(
        name: String!
        description: String
        visibility: PlaylistVisibility!
    ): Playlist!
    @canModel(ability: "create")
    @validator(class: "App\\GraphQL\\Validators\\Mutation\\List\\CreatePlaylistValidator")
    @field(resolver: "App\\GraphQL\\Mutations\\List\\PlaylistMutator@store")


    updatePlaylist(
        id: String! @bind(class: "App\\Models\\List\\Playlist", column: "hashid")
        name: String
        description: String
        visibility: PlaylistVisibility
    ): Playlist!
    @canModel(ability: "update", injectArgs: true)
    @validator(class: "App\\GraphQL\\Validators\\Mutation\\List\\UpdatePlaylistValidator")
    @field(resolver: "App\\GraphQL\\Mutations\\List\\PlaylistMutator@update")


    deletePlaylist(
        id: String! @bind(class: "App\\Models\\List\\Playlist", column: "hashid")
    ): Playlist!
    @canModel(ability: "delete", injectArgs: true)
    @field(resolver: "App\\GraphQL\\Mutations\\List\\PlaylistMutator@destroy")


    restorePlaylist(
        id: String! @bind(class: "App\\Models\\List\\Playlist", column: "hashid")
    ): Playlist!
    @canModel(ability: "restore", injectArgs: true)
    @field(resolver: "App\\GraphQL\\Mutations\\List\\PlaylistMutator@restore")


    forceDeletePlaylist(
        id: String! @bind(class: "App\\Models\\List\\Playlist", column: "hashid")
    ): MessageResponse!
    @canModel(ability: "forceDelete", injectArgs: true, model: "App\\Models\\List\\Playlist")
    @field(resolver: "App\\GraphQL\\Mutations\\List\\PlaylistMutator@forceDelete")
}